{"version":3,"sources":["assets/img/shirt.png","store/redusers/cardsReducer.js","functions/CreateNewArrayFullPackCards.js","functions/ShuffleArrayCards.js","functions/LogicPairwiseSelectionCards.js","App.js","store/store.js","index.js","assets/scss/onlyStyleFile.module.scss"],"names":["NEW_ARRAY_CARDS","INDEX_FOR_CARDS","ACTIVE_CARD","SHUFFLE_ARRAY_CARDS","FIRST_CARD_SELECTED","SECOND_CARD_SELECTED","LOCK_BOARD","initialState","cards","index","name","img","newArrayCards","shuffleArrayCards","firstCardSelected","secondCardSelected","lockBoard","setActiveCard","id","active","type","setFirstCardSelected","setSecondCardSelected","CreateNewArrayFullPackCards","dispatch","useDispatch","dataCards","useSelector","state","newDataCards","setNewDataCards","useCallback","e","setIndexCards","idx","setIndexForCards","useEffect","concat","map","item","ShuffleArrayCards","setShuffleArray","sort","Math","random","LogicPairwiseSelectionCards","setLock","firstCard","secondCard","setFirstCard","setSecondCard","setActiveCards","setTimeout","App","cardsArray","lock","className","style","wrapper","container","card","flip","onClick","setFirstAndSecondCards","src","alt","shirt","reducers","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c323c232.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/shirt.a7c0ee99.png\";","const NEW_ARRAY_CARDS = 'NEW_ARRAY_CARDS'\r\nconst INDEX_FOR_CARDS = 'INDEX_FOR_CARDS'\r\nconst ACTIVE_CARD = 'ACTIVE_CARD'\r\nconst SHUFFLE_ARRAY_CARDS = 'SHUFFLE_ARRAY_CARDS'\r\nconst FIRST_CARD_SELECTED = 'FIRST_CARD_SELECTED'\r\nconst SECOND_CARD_SELECTED = 'SECOND_CARD_SELECTED'\r\nconst LOCK_BOARD = 'LOCK_BOARD'\r\n\r\nlet initialState = {\r\n    cards: [\r\n        {index: 1, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/1.png'},\r\n        {index: 2, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/2.png'},\r\n        {index: 3, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/3.png'},\r\n        {index: 4, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/4.png'},\r\n        {index: 5, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/5.png'},\r\n        {index: 6, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/6.png'},\r\n        {index: 7, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/7.png'},\r\n        {index: 8, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/8.png'},\r\n    ],\r\n    newArrayCards: [],\r\n    shuffleArrayCards: [],\r\n    firstCardSelected: null,\r\n    secondCardSelected: null,\r\n    lockBoard: false\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case NEW_ARRAY_CARDS:\r\n            return {\r\n                ...state,\r\n                newArrayCards: action.newArrayCards\r\n            }\r\n        case INDEX_FOR_CARDS:\r\n            return {\r\n                ...state,\r\n                newArrayCards: state.newArrayCards.map((item, idx) =>\r\n                    idx === action.idx ? {...item, id: action.id} : item\r\n                )\r\n            }\r\n        case SHUFFLE_ARRAY_CARDS:\r\n            return {\r\n                ...state,\r\n                shuffleArrayCards: action.shuffleArrayCards\r\n            }\r\n        case ACTIVE_CARD:\r\n            return {\r\n                ...state,\r\n                shuffleArrayCards: state.shuffleArrayCards.map(item =>\r\n                    item.id === action.id ? {...item, active: action.active} : item\r\n                )\r\n            }\r\n        case FIRST_CARD_SELECTED:\r\n            return {\r\n                ...state,\r\n                firstCardSelected: action.firstCardSelected\r\n            }\r\n        case SECOND_CARD_SELECTED:\r\n            return {\r\n                ...state,\r\n                secondCardSelected: action.secondCardSelected\r\n            }\r\n        case LOCK_BOARD:\r\n            return {\r\n                ...state,\r\n                lockBoard: action.lockBoard\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setNewArrayCards = (newArrayCards) => ({type: NEW_ARRAY_CARDS, newArrayCards})\r\nexport const setIndexForCards = (id, idx) => ({type: INDEX_FOR_CARDS, id, idx})\r\nexport const setActiveCard = (id, active) => ({type: ACTIVE_CARD, id, active})\r\nexport const setShuffleArrayCards = (shuffleArrayCards) => ({type: SHUFFLE_ARRAY_CARDS, shuffleArrayCards})\r\nexport const setFirstCardSelected = (firstCardSelected) => ({type: FIRST_CARD_SELECTED, firstCardSelected})\r\nexport const setSecondCardSelected = (secondCardSelected) => ({type: SECOND_CARD_SELECTED, secondCardSelected})\r\nexport const setLockBoard = (lockBoard) => ({type: LOCK_BOARD, lockBoard})\r\n","import {useCallback, useEffect} from \"react\";\r\nimport {setIndexForCards, setNewArrayCards} from \"../store/redusers/cardsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nexport const CreateNewArrayFullPackCards = () => {\r\n    /* call dispatch */\r\n    let dispatch = useDispatch()\r\n\r\n    /* cards data */\r\n    const dataCards = useSelector(state => state.cards.cards)\r\n    const newDataCards = useSelector(state => state.cards.newArrayCards)\r\n\r\n    /* callback in store new array cards */\r\n    const setNewDataCards = useCallback((e) => dispatch(setNewArrayCards(e)), [dispatch])\r\n    const setIndexCards = useCallback((index, idx) => dispatch(setIndexForCards(index, idx)), [dispatch])\r\n\r\n    /* create full array cards */\r\n    useEffect(() => {\r\n        setNewDataCards(\r\n            dataCards.concat(dataCards).map(item => {\r\n                    item['id'] = ''\r\n                    item['active'] = false\r\n                    return item\r\n                }\r\n            )\r\n        )\r\n    }, [dataCards, setNewDataCards])\r\n\r\n    /* assigning an id to each card */\r\n    useEffect(() => {\r\n        newDataCards.map((item, idx) =>\r\n            item.id === '' ? setIndexCards(idx, idx) : null\r\n        )\r\n    }, [newDataCards, setIndexCards])\r\n}\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useCallback, useEffect} from \"react\";\r\nimport {setShuffleArrayCards} from \"../store/redusers/cardsReducer\";\r\n\r\nexport const ShuffleArrayCards = () => {\r\n    let dispatch = useDispatch()\r\n\r\n    /* cards data */\r\n    const newDataCards = useSelector(state => state.cards.newArrayCards)\r\n\r\n    /* callback shuffle cards */\r\n    const setShuffleArray = useCallback((e) => dispatch(setShuffleArrayCards(e)), [dispatch])\r\n\r\n    /* logic shuffle */\r\n    useEffect(() => {\r\n        setShuffleArray(\r\n            newDataCards.sort(() => {\r\n                return 0.5 - Math.random()\r\n            })\r\n        )\r\n    }, [newDataCards, setShuffleArray])\r\n}\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useCallback} from \"react\";\r\nimport {setActiveCard, setFirstCardSelected, setLockBoard, setSecondCardSelected} from \"../store/redusers/cardsReducer\";\r\n\r\nexport const LogicPairwiseSelectionCards = (index) => {\r\n    let dispatch = useDispatch()\r\n\r\n    /* lockBoard */\r\n    const setLock = useCallback((e) => dispatch(setLockBoard(e)), [dispatch])\r\n\r\n    /* view first and second cards */\r\n    const firstCard = useSelector(state => state.cards.firstCardSelected)\r\n    const secondCard = useSelector(state => state.cards.secondCardSelected)\r\n\r\n    /* set first and second cards */\r\n    const setFirstCard = useCallback((e) => dispatch(setFirstCardSelected(e)), [dispatch])\r\n    const setSecondCard = useCallback((e) => dispatch(setSecondCardSelected(e)), [dispatch])\r\n\r\n    /* ----- toggle class card for flip ----- */\r\n    const setActiveCards = useCallback((id, active) => dispatch(setActiveCard(id, active)), [dispatch])\r\n\r\n    /* handling event */\r\n    const equally = () => {\r\n        setFirstCard('')\r\n        setSecondCard('')\r\n    }\r\n\r\n    const notEqually = () => {\r\n        setLock(true)\r\n\r\n        setTimeout(() => {\r\n            setActiveCards(firstCard.id, false)\r\n            setActiveCards(secondCard.id, false)\r\n            setFirstCard('')\r\n            setSecondCard('')\r\n\r\n            setLock(false)\r\n        }, 500)\r\n    }\r\n\r\n    if (firstCard && secondCard) {\r\n        let complete = firstCard.index === secondCard.index\r\n        complete ? equally() : notEqually()\r\n    }\r\n}\r\n","import React, {useCallback} from \"react\";\nimport style from \"./assets/scss/onlyStyleFile.module.scss\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport shirt from \"./assets/img/shirt.png\";\nimport {CreateNewArrayFullPackCards} from \"./functions/CreateNewArrayFullPackCards\";\nimport {setActiveCard, setFirstCardSelected, setSecondCardSelected} from \"./store/redusers/cardsReducer\";\nimport {ShuffleArrayCards} from \"./functions/ShuffleArrayCards\";\nimport {LogicPairwiseSelectionCards} from \"./functions/LogicPairwiseSelectionCards\";\n\nexport const App = () => {\n    let dispatch = useDispatch()\n\n    /* ----- cards data ----- */\n    const cardsArray = useSelector(state => state.cards.shuffleArrayCards)\n\n    /* ----- create new array full pack cards ----- */\n    CreateNewArrayFullPackCards()\n\n    /* ----- toggle class card for flip ----- */\n    /* lock board */\n    const lock = useSelector(state => state.cards.lockBoard)\n    /* set active flip card */\n    const setActiveCards = useCallback((id, active) => dispatch(setActiveCard(id, active)), [dispatch])\n\n    const flipCard = (id) => {\n        setActiveCards(id, true)\n    }\n\n    /* ----- shuffle cards ----- */\n    ShuffleArrayCards()\n\n    /* ----- pairwise selection cards ----- */\n    /* view first and second cards */\n    const firstCard = useSelector(state => state.cards.firstCardSelected)\n    const secondCard = useSelector(state => state.cards.secondCardSelected)\n\n    /* set first and second cards */\n    const setFirstCard = useCallback((e) => dispatch(setFirstCardSelected(e)), [dispatch])\n    const setSecondCard = useCallback((e) => dispatch(setSecondCardSelected(e)), [dispatch])\n\n    const setFirstAndSecondCards = (item) => {\n        if (!firstCard) setFirstCard(item)\n        if (firstCard && !secondCard) setSecondCard(item)\n    }\n\n    LogicPairwiseSelectionCards()\n\n\n    return (\n        <main className={style.wrapper}>\n            <section className={style.container}>\n                {\n                    cardsArray.map((item, idx) =>\n                        <div\n                            key={idx}\n                            className={`${style.card} ${item.active ? style.flip : null}`}\n                            onClick={() => {\n                                if(!item.active || lock) {\n                                    flipCard(item.id)\n                                    setFirstAndSecondCards(item)\n                                }\n                            }}\n                        >\n                            <img src={item.img} alt={item.name + item.index}/>\n                            <img src={shirt} alt=\"shirt\"/>\n                        </div>\n                    )\n                }\n            </section>\n        </main>\n    )\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport {cardsReducer} from \"./redusers/cardsReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    cards: cardsReducer\r\n});\r\n\r\nexport let store = createStore(reducers);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./assets/scss/_zeroStyle.scss\";\r\nimport {App} from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"onlyStyleFile_wrapper__64Mi_\",\"container\":\"onlyStyleFile_container__3uTNE\",\"card\":\"onlyStyleFile_card__RYd0f\",\"flip\":\"onlyStyleFile_flip__kyoHN\"};"],"sourceRoot":""}