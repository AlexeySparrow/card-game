{"version":3,"sources":["components/FinishWindow/FinishWindow.module.scss","components/ImgCastle/ImgCastle.module.scss","assets/img/shirt.png","store/redusers/cardsReducer.js","functions/CreateNewArrayFullPackCards.js","functions/ShuffleArrayCards.js","functions/LogicPairwiseSelectionCards.js","components/FinishWindow/FinishWindow.js","assets/img/dark.png","assets/img/light.png","components/ImgCastle/ImgCastle.js","App.js","functions/FinishGame.js","store/store.js","index.js","assets/scss/App.module.scss"],"names":["module","exports","NEW_ARRAY_CARDS","INDEX_FOR_CARDS","ACTIVE_CARD","SHUFFLE_ARRAY_CARDS","FIRST_CARD_SELECTED","SECOND_CARD_SELECTED","LOCK_BOARD","FINISH","initialState","cards","index","name","img","newArrayCards","shuffleArrayCards","firstCardSelected","secondCardSelected","lockBoard","finish","setActiveCard","id","active","type","setFirstCardSelected","setSecondCardSelected","setFinish","CreateNewArrayFullPackCards","dispatch","useDispatch","dataCards","useSelector","state","newDataCards","setNewDataCards","useCallback","e","setIndexCards","idx","setIndexForCards","useEffect","concat","map","item","ShuffleArrayCards","setShuffleArray","sort","Math","random","LogicPairwiseSelectionCards","setLock","firstCard","secondCard","setFirstCard","setSecondCard","setActiveCards","setTimeout","FinishWindow","setFinishGame","className","style","container","onClick","window","location","reload","ImgCastle","src","imgDark","alt","imgLight","App","cardsArray","lock","finishArray","filter","push","length","FinishGame","wrapper","card","flip","setFirstAndSecondCards","shirt","reducers","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf98675a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FinishWindow_container__1-y2k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ImgCastle_container__acyYA\"};","export default __webpack_public_path__ + \"static/media/shirt.a7c0ee99.png\";","const NEW_ARRAY_CARDS = 'NEW_ARRAY_CARDS'\r\nconst INDEX_FOR_CARDS = 'INDEX_FOR_CARDS'\r\nconst ACTIVE_CARD = 'ACTIVE_CARD'\r\nconst SHUFFLE_ARRAY_CARDS = 'SHUFFLE_ARRAY_CARDS'\r\nconst FIRST_CARD_SELECTED = 'FIRST_CARD_SELECTED'\r\nconst SECOND_CARD_SELECTED = 'SECOND_CARD_SELECTED'\r\nconst LOCK_BOARD = 'LOCK_BOARD'\r\nconst FINISH = 'FINISH'\r\n\r\nlet initialState = {\r\n    cards: [\r\n        {index: 1, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/1.png'},\r\n        {index: 2, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/2.png'},\r\n        {index: 3, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/3.png'},\r\n        {index: 4, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/4.png'},\r\n        {index: 5, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/5.png'},\r\n        {index: 6, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/6.png'},\r\n        {index: 7, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/7.png'},\r\n        {index: 8, name: 'img', img: 'https://alexeysparrow.github.io/card-game/img/8.png'},\r\n    ],\r\n    newArrayCards: [],\r\n    shuffleArrayCards: [],\r\n    firstCardSelected: null,\r\n    secondCardSelected: null,\r\n    lockBoard: false,\r\n    finish: false\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case NEW_ARRAY_CARDS:\r\n            return {\r\n                ...state,\r\n                newArrayCards: action.newArrayCards\r\n            }\r\n        case INDEX_FOR_CARDS:\r\n            return {\r\n                ...state,\r\n                newArrayCards: state.newArrayCards.map((item, idx) =>\r\n                    idx === action.idx ? {...item, id: action.id} : item\r\n                )\r\n            }\r\n        case SHUFFLE_ARRAY_CARDS:\r\n            return {\r\n                ...state,\r\n                shuffleArrayCards: action.shuffleArrayCards\r\n            }\r\n        case ACTIVE_CARD:\r\n            return {\r\n                ...state,\r\n                shuffleArrayCards: state.shuffleArrayCards.map(item =>\r\n                    item.id === action.id ? {...item, active: action.active} : item\r\n                )\r\n            }\r\n        case FIRST_CARD_SELECTED:\r\n            return {\r\n                ...state,\r\n                firstCardSelected: action.firstCardSelected\r\n            }\r\n        case SECOND_CARD_SELECTED:\r\n            return {\r\n                ...state,\r\n                secondCardSelected: action.secondCardSelected\r\n            }\r\n        case LOCK_BOARD:\r\n            return {\r\n                ...state,\r\n                lockBoard: action.lockBoard\r\n            }\r\n        case FINISH:\r\n            return {\r\n                ...state,\r\n                finish: action.finish\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setNewArrayCards = (newArrayCards) => ({type: NEW_ARRAY_CARDS, newArrayCards})\r\nexport const setIndexForCards = (id, idx) => ({type: INDEX_FOR_CARDS, id, idx})\r\nexport const setActiveCard = (id, active) => ({type: ACTIVE_CARD, id, active})\r\nexport const setShuffleArrayCards = (shuffleArrayCards) => ({type: SHUFFLE_ARRAY_CARDS, shuffleArrayCards})\r\nexport const setFirstCardSelected = (firstCardSelected) => ({type: FIRST_CARD_SELECTED, firstCardSelected})\r\nexport const setSecondCardSelected = (secondCardSelected) => ({type: SECOND_CARD_SELECTED, secondCardSelected})\r\nexport const setLockBoard = (lockBoard) => ({type: LOCK_BOARD, lockBoard})\r\nexport const setFinish = (finish) => ({type: FINISH, finish})\r\n","import {useCallback, useEffect} from \"react\";\r\nimport {setIndexForCards, setNewArrayCards} from \"../store/redusers/cardsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nexport const CreateNewArrayFullPackCards = () => {\r\n    /* call dispatch */\r\n    let dispatch = useDispatch()\r\n\r\n    /* cards data */\r\n    const dataCards = useSelector(state => state.cards.cards)\r\n    const newDataCards = useSelector(state => state.cards.newArrayCards)\r\n\r\n    /* callback in store new array cards */\r\n    const setNewDataCards = useCallback((e) => dispatch(setNewArrayCards(e)), [dispatch])\r\n    const setIndexCards = useCallback((index, idx) => dispatch(setIndexForCards(index, idx)), [dispatch])\r\n\r\n    /* create full array cards */\r\n    useEffect(() => {\r\n        setNewDataCards(\r\n            dataCards.concat(dataCards).map(item => {\r\n                    item['id'] = ''\r\n                    item['active'] = false\r\n                    return item\r\n                }\r\n            )\r\n        )\r\n    }, [dataCards, setNewDataCards])\r\n\r\n    /* assigning an id to each card */\r\n    useEffect(() => {\r\n        newDataCards.map((item, idx) =>\r\n            item.id === '' ? setIndexCards(idx, idx) : null\r\n        )\r\n    }, [newDataCards, setIndexCards])\r\n}\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useCallback, useEffect} from \"react\";\r\nimport {setShuffleArrayCards} from \"../store/redusers/cardsReducer\";\r\n\r\nexport const ShuffleArrayCards = () => {\r\n    let dispatch = useDispatch()\r\n\r\n    /* cards data */\r\n    const newDataCards = useSelector(state => state.cards.newArrayCards)\r\n\r\n    /* callback shuffle cards */\r\n    const setShuffleArray = useCallback((e) => dispatch(setShuffleArrayCards(e)), [dispatch])\r\n\r\n    /* logic shuffle */\r\n    useEffect(() => {\r\n        setShuffleArray(\r\n            newDataCards.sort(() => {\r\n                return 0.5 - Math.random()\r\n            })\r\n        )\r\n    }, [newDataCards, setShuffleArray])\r\n}\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useCallback} from \"react\";\r\nimport {setActiveCard, setFirstCardSelected, setLockBoard, setSecondCardSelected} from \"../store/redusers/cardsReducer\";\r\n\r\nexport const LogicPairwiseSelectionCards = (index) => {\r\n    let dispatch = useDispatch()\r\n\r\n    /* lockBoard */\r\n    const setLock = useCallback((e) => dispatch(setLockBoard(e)), [dispatch])\r\n\r\n    /* view first and second cards */\r\n    const firstCard = useSelector(state => state.cards.firstCardSelected)\r\n    const secondCard = useSelector(state => state.cards.secondCardSelected)\r\n\r\n    /* set first and second cards */\r\n    const setFirstCard = useCallback((e) => dispatch(setFirstCardSelected(e)), [dispatch])\r\n    const setSecondCard = useCallback((e) => dispatch(setSecondCardSelected(e)), [dispatch])\r\n\r\n    /* ----- toggle class card for flip ----- */\r\n    const setActiveCards = useCallback((id, active) => dispatch(setActiveCard(id, active)), [dispatch])\r\n\r\n    /* handling event */\r\n    const equally = () => {\r\n        setFirstCard('')\r\n        setSecondCard('')\r\n    }\r\n\r\n    const notEqually = () => {\r\n        setLock(true)\r\n\r\n        setTimeout(() => {\r\n            setActiveCards(firstCard.id, false)\r\n            setActiveCards(secondCard.id, false)\r\n            setFirstCard('')\r\n            setSecondCard('')\r\n\r\n            setLock(false)\r\n        }, 500)\r\n    }\r\n\r\n    if (firstCard && secondCard) {\r\n        let complete = firstCard.index === secondCard.index\r\n        complete ? equally() : notEqually()\r\n    }\r\n}\r\n","import React, {useCallback} from \"react\";\r\nimport style from \"./FinishWindow.module.scss\";\r\nimport {setFinish} from \"../../store/redusers/cardsReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport const FinishWindow = () => {\r\n    let dispatch = useDispatch()\r\n    const setFinishGame = useCallback((e) => dispatch(setFinish(e)), [dispatch])\r\n\r\n    const reset = () => {\r\n        setFinishGame(false)\r\n        window.location.reload()\r\n    }\r\n\r\n    return (\r\n        <section className={style.container}>\r\n            <div>\r\n                <h1>game over</h1>\r\n                <p>Ты справился</p>\r\n                <p>молодец!!!</p>\r\n                <button onClick={reset}>я молодец :)</button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/dark.42052cb5.png\";","export default __webpack_public_path__ + \"static/media/light.b7f19e4f.png\";","import React from \"react\";\r\nimport style from \"./ImgCastle.module.scss\";\r\n\r\nimport imgDark from \"../../assets/img/dark.png\";\r\nimport imgLight from \"../../assets/img/light.png\";\r\n\r\nexport const ImgCastle = () => {\r\n    return (\r\n        <section className={style.container}>\r\n            <img src={imgDark} alt=\"\"/>\r\n            <img src={imgLight} alt=\"\"/>\r\n        </section>\r\n    )\r\n}\r\n","import React, {useCallback} from \"react\";\nimport style from \"./assets/scss/App.module.scss\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport shirt from \"./assets/img/shirt.png\";\nimport {CreateNewArrayFullPackCards} from \"./functions/CreateNewArrayFullPackCards\";\nimport {setActiveCard, setFirstCardSelected, setSecondCardSelected} from \"./store/redusers/cardsReducer\";\nimport {ShuffleArrayCards} from \"./functions/ShuffleArrayCards\";\nimport {LogicPairwiseSelectionCards} from \"./functions/LogicPairwiseSelectionCards\";\nimport {FinishGame} from \"./functions/FinishGame\";\nimport {FinishWindow} from \"./components/FinishWindow/FinishWindow\";\nimport {ImgCastle} from \"./components/ImgCastle/ImgCastle\";\n\nexport const App = () => {\n    let dispatch = useDispatch()\n\n    /* ----- cards data ----- */\n    const cardsArray = useSelector(state => state.cards.shuffleArrayCards)\n\n    /* ----- create new array full pack cards ----- */\n    CreateNewArrayFullPackCards()\n\n    /* ----- toggle class card for flip ----- */\n    /* lock board */\n    const lock = useSelector(state => state.cards.lockBoard)\n    /* set active flip card */\n    const setActiveCards = useCallback((id, active) => dispatch(setActiveCard(id, active)), [dispatch])\n\n    const flipCard = (id) => {\n        setActiveCards(id, true)\n    }\n\n    /* ----- shuffle cards ----- */\n    ShuffleArrayCards()\n\n    /* ----- pairwise selection cards ----- */\n    /* view first and second cards */\n    const firstCard = useSelector(state => state.cards.firstCardSelected)\n    const secondCard = useSelector(state => state.cards.secondCardSelected)\n\n    /* set first and second cards */\n    const setFirstCard = useCallback((e) => dispatch(setFirstCardSelected(e)), [dispatch])\n    const setSecondCard = useCallback((e) => dispatch(setSecondCardSelected(e)), [dispatch])\n\n    const setFirstAndSecondCards = (item) => {\n        if (!firstCard) setFirstCard(item)\n        if (firstCard && !secondCard) setSecondCard(item)\n    }\n\n    LogicPairwiseSelectionCards()\n\n    /* ----- finish game ----- */\n    const finish = useSelector(state => state.cards.finish)\n    FinishGame()\n\n    return (\n        <main className={style.wrapper}>\n            <ImgCastle/>\n            <section className={style.container}>\n                {\n                    cardsArray.map((item, idx) =>\n                        <div\n                            key={idx}\n                            className={`${style.card} ${item.active ? style.flip : null}`}\n                            onClick={() => {\n                                if (!item.active || lock) {\n                                    flipCard(item.id)\n                                    setFirstAndSecondCards(item)\n                                }\n                            }}\n                        >\n                            <img src={item.img} alt={item.name + item.index}/>\n                            <img src={shirt} alt=\"shirt\"/>\n                        </div>\n                    )\n                }\n            </section>\n            {\n                finish ? <FinishWindow/> : null\n            }\n        </main>\n    )\n}\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useCallback, useEffect} from \"react\";\r\nimport {setFinish} from \"../store/redusers/cardsReducer\";\r\n\r\n\r\nexport const FinishGame = () => {\r\n    let dispatch = useDispatch()\r\n\r\n    /* cards data */\r\n    const cardsArray = useSelector(state => state.cards.shuffleArrayCards)\r\n\r\n    /* finish array */\r\n    let finishArray = []\r\n\r\n    /* finish logic */\r\n    const setFinishGame = useCallback((e) => dispatch(setFinish(e)), [dispatch])\r\n\r\n    cardsArray.filter(item => item.active ? finishArray.push(item) : null)\r\n\r\n    useEffect(() => {\r\n        if (cardsArray.length > 0) {\r\n            if (cardsArray.length === finishArray.length) setFinishGame(true)\r\n        }\r\n    }, [cardsArray.length, finishArray.length, setFinishGame])\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {cardsReducer} from \"./redusers/cardsReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    cards: cardsReducer\r\n});\r\n\r\nexport let store = createStore(reducers);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./assets/scss/_zeroStyle.scss\";\r\nimport \"./assets/scss/_fonts.scss\";\r\nimport {App} from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__SxrFX\",\"container\":\"App_container__3xDKK\",\"card\":\"App_card__q1Mr6\",\"flip\":\"App_flip__YfJzP\"};"],"sourceRoot":""}